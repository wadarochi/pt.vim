"dein Scripts-----------------------------
if &compatible
	set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/dein//repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand('~/.vim/dein/'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

" Add or remove your plugins here:
" NERDtree
call dein#add('scrooloose/nerdtree',
	\ {'on_cmd': 'NERDTreeToggle'})

" Hexmode
call dein#add('fidian/hexmode',
	\ {'on_cmd': 'Hexmode'})

" tasklist
call dein#add('vim-scripts/TaskList.vim')

" tagbar
call dein#add('majutsushi/tagbar')

" denite
call dein#add('Shougo/denite.nvim')

" nvim-yarp, required by denite.nvim
call dein#add('roxma/nvim-yarp')

" vim-hug-neovim-rpc, required by denite.nvim
call dein#add('roxma/vim-hug-neovim-rpc')

" denite mru
call dein#add('Shougo/neomru.vim')

" echodoc.vim
call dein#add('Shougo/echodoc.vim')

" vimwiki
call dein#add('vimwiki/vimwiki')

" airline
call dein#add('vim-airline/vim-airline')

" airline-theme
call dein#add('vim-airline/vim-airline-themes')

" ultisnips
call dein#add('SirVer/ultisnips')

" vim-snippets
call dein#add('honza/vim-snippets')

" drawit
call dein#add('vim-scripts/DrawIt')

" vim-bracketed-paste
call dein#add('ConradIrwin/vim-bracketed-paste')

" wakatime
call dein#add('wakatime/vim-wakatime')

" material
call dein#add('kaicataldo/material.vim')

" vim-bookmarks plugin
call dein#add('MattesGroeger/vim-bookmarks')

" Signify uses the sign column to indicate added, modified and removed lines
" based on the data of an underlying version control system.
call dein#add('mhinz/vim-signify')

" show indent character
call dein#add('Yggdroot/indentLine')

" shows how many times does a search pattern occur in the current buffer
call dein#add('google/vim-searchindex')

" codequery support
call dein#add('wadarochi/vim-codequery')

" Gutentags
call dein#add('ludovicchabant/vim-gutentags')

" Gutentags_plus
call dein#add('skywind3000/gutentags_plus')

" Gutentags_plus
call dein#add('skywind3000/vim-preview')

" my own plugin
call dein#local('~/.vim/bundle', {},
	\ ['pt.vim'])

call dein#local('~/.vim/bundle', {},
	\ ['YouCompleteMe'])

" how to update YouCompleteMe:
" cd  ~/.vim/bundle/YouCompleteMe
" git clean -f
" git pull
" rm -r ~/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party
" git submodule update --recursive --init
" ./install.py --clang-completer

call dein#add('rdnetto/YCM-Generator')

call dein#add('jremmen/vim-ripgrep')

" 这两个东西，Windows只能自行手动安装了
if !has('win32')
	if system('uname') =~ "FreeBSD"
		" vimproc，现在dein不支持build dictionary了，只能每个平台写一份vimrc，改build
		call dein#add('Shougo/vimproc.vim', {
			\ 'build': "gmake",
			\ })
	else
		call dein#add('Shougo/vimproc.vim', {
			\ 'build': "make",
			\ })
	endif
endif

" 以上是通用插件，下面的插件需要针对不同的文件类型
" lua-support
call dein#add('WolfgangMehner/lua-support',
	\ {'on_ft': ['lua']})

" c-support
call dein#add('WolfgangMehner/c-support',
	\ {'on_ft': ['c', 'cpp']})

" new cpp syntax highlight
call dein#add('octol/vim-cpp-enhanced-highlight',
	\ {'on_ft': ['cpp']})

" textobj
call dein#add('kana/vim-textobj-user')
call dein#add('kana/vim-textobj-indent')
call dein#add('kana/vim-textobj-syntax')
call dein#add('kana/vim-textobj-function',
	\ {'on_ft': ['c', 'cpp', 'vim', 'java']})
call dein#add('sgur/vim-textobj-parameter')

" LeaderF
call dein#add('Yggdroot/LeaderF', {
			\ 'build': "./install.sh",
			\ })

" Required:
call dein#end()

" Required:
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
	call dein#install()
endif

"End dein Scripts-------------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
colo material
syntax enable

if has("mac") || has("macunix")
	set guifont=Monaco\ for\ Powerline:h12
elseif has("win32") || has("win64")
	set guifont=Monaco\ for\ Powerline:h12:cANSI
	set renderoptions=type:directx,renmode:5
endif

if has('gui_running')
	set columns=160
	set lines=70
	set background=dark
else
	set background=dark
endif

if (has('termguicolors'))
	set termguicolors
endif

let g:material_theme_style = 'dark'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" common setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" search result highlight
set hlsearch
" I need backspace
set bs=2

" tab width
set tabstop=4
set cindent shiftwidth=4
set autoindent shiftwidth=4

set smarttab

" auto change CWD when open a new buffer
autocmd BufRead * silent! lcd %:p:h

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file encoding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set file encoding
set enc=utf-8
set fileencodings=utf-8,cp936,big5,euc-kr,euc-jp

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tagbar
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>tb :TagbarToggle<CR>
" 解决tasklist和vimwiki的冲突
map <leader>v <Plug>TaskList
" for vimwiki
nmap <leader>tt <Plug>VimwikiToggleListItem

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tagbar
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !has("win32")
	let g:vimwiki_list = [{'path': '~/vimwiki/',
				\ 'path_html': '~/vimwiki_html/',
				\ 'template_path': '~/vimwiki_html/template',
				\ 'template_default': 'default',
				\ 'template_ext': '.htm'}]
else
	let g:vimwiki_list = [{'path': $HOME . '\\vimwiki\\',
				\ 'path_html': $HOME . '\\vimwiki_html\\',
				\ 'template_path': $HOME . '\\vimwiki_html\\template',
				\ 'template_default': 'default',
				\ 'template_ext': '.htm'}]
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" txt.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"syntax highlight for txt.vim，不知道为什么pt.vim里面ftdetect不能用，只好放这里
au BufRead,BufNewFile *.txt setlocal ft=txt

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 切换路径，有的时候需要在指定路径下跑ag、unite什么的
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function PtGoToBase()
	let cur_path = expand("%:p")
	if !exists("g:pt_base")
		echom "You need set base first. Use <space>b to set base."
		return
	endif

	echom "Set CWD to " . g:pt_base
	chdir "" . g:pt_base
endfunction

function PtSetBase()
	let g:pt_base = expand("%:p:h")
	echom "Set new CWD to " . g:pt_base
endfunction

function PtShowBase()
	if !exists("g:pt_base")
		echom "You need set base first. Use <space>b to set base."
		return
	endif

	echom "Current CWD : " . g:pt_base
endfunction

" 切换路径到当前的base下面
nnoremap <space>c :call PtGoToBase() <CR>
nnoremap <space>b :call PtSetBase() <CR>
nnoremap <space>v :call PtShowBase() <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" denite.nvim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" For ripgrep
call denite#custom#var('file/rec', 'command',
\ ['rg', '--files', '--glob', '!.git'])

call denite#custom#map(
	\ 'insert',
	\ '<Down>',
	\ '<denite:move_to_next_line>',
	\ 'noremap'
	\)
call denite#custom#map(
	\ 'insert',
	\ '<Up>',
	\ '<denite:move_to_previous_line>',
	\ 'noremap'
	\)

" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
		\ ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" 文本搜索
nnoremap <space>/ :Denite -no-empty grep:.<cr>
" Ctrl-P
noremap <C-p> :Denite file_rec<CR>
" buffer切换
nnoremap <space>s :Denite buffer<cr>
" 最近打开过的文件
nnoremap <space>r :Denite file_mru<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" echodoc.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" disable showmode alltogether.
set noshowmode
let g:echodoc_enable_at_startup = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rg.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rg_binary = "/usr/bin/rg"
let g:rg_highlight = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDtree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-n> :NERDTreeToggle<CR>
let NERDTreeChDirMode=2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'base16'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe & UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <leader>gc :pclose<CR>

let g:ycm_confirm_extra_conf=0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" all kinds of tags
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=./.tags;,.tags

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-codequery
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>cm :CodeQueryMenu Denite<CR>
nnoremap <leader>cd :CodeQuery Definition<CR> 
nnoremap <leader>cs :CodeQuery Symbol<CR> 
nnoremap <leader>cq :CodeQuery<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-gutentags
"
" 作者：韦易笑
" 链接：https://www.zhihu.com/question/47691414/answer/373700711
" 来源：知乎
" 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.idea', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
	let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.vim/cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" 我已经全面转向Universal ctags了
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 检测 ~/.vim/cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
	silent! call mkdir(s:vim_tags, 'p')
endif

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

let $GTAGSLABEL = 'native-pygments'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gutentags_plus
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gutentags_plus_nomap = 1
noremap <silent> <leader>ls :GscopeFind s <C-R><C-W><cr>
noremap <silent> <leader>lg :GscopeFind g <C-R><C-W><cr>
noremap <silent> <leader>lc :GscopeFind c <C-R><C-W><cr>
noremap <silent> <leader>lt :GscopeFind t <C-R><C-W><cr>
noremap <silent> <leader>le :GscopeFind e <C-R><C-W><cr>
noremap <silent> <leader>lf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>li :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>ld :GscopeFind d <C-R><C-W><cr>
noremap <silent> <leader>la :GscopeFind a <C-R><C-W><cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LeaderF
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'

noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-preview
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" new cpp syntax highlight
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_concepts_highlight = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-bookmarks
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=194 ctermfg=NONE
let g:bookmark_sign = '♥'
let g:bookmark_highlight_lines = 1

" 干掉默认的key bindings
let g:bookmark_no_default_key_mappings = 1
" 为每个buffer单独存放bookmarks
let g:bookmark_manage_per_buffer = 1

" 新的key bindings
nmap <leader>mm <Plug>BookmarkToggle
nmap <leader>mi <Plug>BookmarkAnnotate
nmap <leader>ma <Plug>BookmarkShowAll
nmap <leader>mn <Plug>BookmarkNext
nmap <leader>mp <Plug>BookmarkPrev
nmap <leader>mc <Plug>BookmarkClear
nmap <leader>mx <Plug>BookmarkClearAll
nmap <leader>mkk <Plug>BookmarkMoveUp
nmap <leader>mjj <Plug>BookmarkMoveDown
nmap <leader>mg <Plug>BookmarkMoveToLine

" 每个buffer存放bookmarks的地方，选取完整路径，然后将sep改成%，存在$HOME/.vim/bookmarks
function! g:BMBufferFileLocation(file)
	let s:prefix = $HOME
	if !has("win32")
		let s:prefix = s:prefix . '/.vim/bookmarks/'
	else
		let s:prefix = s:prefix . '\\.vim\\bookmarks\\'
	endif
	return s:prefix . fnamemodify(a:file, ":p:gs?[\\/]?\%?")
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" indentLine
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indentLine_setColors = 0
let g:indentLine_char = '┆'
let g:indentLine_leadingSpaceChar = '˰'
let g:indentLine_leadingSpaceEnabled = 1
set list lcs=tab:\|\ 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 不同操作系统相关的配置
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function PtCommonInit()
	if !has("win32")
		set backupdir=~/.vim/backup//
		set directory=~/.vim/swap//
		set undodir=~/.vim/undo//
	else
		exe "set backupdir=" . $HOME . "\\.vim\\backup\\"
		exe "set directory=" . $HOME . "\\.vim\\swap\\"
		exe "set undodir=" . $HOME . "\\.vim\\undo\\"

		set t_Co=256
	endif
endfunction

function PtMacInit()
	call PtCommonInit()

	" for copy and paste
	nmap <F1> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
	imap <F1> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
	nmap <F2> :.w !pbcopy<CR><CR>
	vmap <F2> :w !pbcopy<CR><CR>
endfunction

function PtWinInit()
	call PtCommonInit()
endfunction

function PtLinuxInit()
	call PtCommonInit()
endfunction

function PtFreeBSDInit()
	call PtCommonInit()

	" lpc plugin
	nmap <C-q> <ESC>:!lpc_compile %<CR>
	nmap <C-k> <ESC>:!lpc_update %<CR>
endfunction

if has("win32")
	call PtWinInit()
else
	let s:os_name = system("uname")
	if s:os_name =~ "Linux"
		call PtLinuxInit()
	elseif s:os_name =~ "Darwino"
		call PtMacInit()
	elseif s:os_name =~ "FreeBSD"
		call PtFreeBSDInit()
	endif
endif
